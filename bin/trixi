#!/bin/bash

# This file uses the method outlined in [1] to pass additional arguments to the
# `julia` executable (in this case: enable colored output). The approach should
# work portably on all UNIX-like operating systems.
#
# NOTE TO WINDOWS USERS: Just invoke `bin/trixi` explicitly with the `julia` executable.
#
# [1]: https://docs.julialang.org/en/v1/manual/faq/#How-do-I-pass-options-to-julia-using-#!/usr/bin/env?-1

#=
# Check if '-i' or '--interactive' was passed as an argument
interactive=0
for arg in "$@"; do
  if [ "$arg" = "-i" ] || [ "$arg" = "--interactive" ]; then
    interactive=1
  fi
done

# Get directory of script
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
PROJECT_DIR="$(dirname '$DIR')"

# If not interactive, just run script as usual. Otherwise load REPL
if [ $interactive -eq 0 ]; then
  exec julia --color=yes --project="$PROJECT_DIR" \
      -e 'include(popfirst!(ARGS))' "${BASH_SOURCE[0]}" "$@"
else
  init='
    try
      @eval using Revise
      iter = 0
      @async begin
        # Wait until REPL is initialized but limit to 5 seconds (= 100 * 0.05 seconds)
        while !isdefined(Base, :active_repl_backend) && iter < 100
          sleep(0.05)
          iter += 1
        end

        if isdefined(Base, :active_repl_backend)
          # If REPL is initialized, steal backend (whatever that means) to enable Revise
          Revise.steal_repl_backend(Base.active_repl_backend)
          @info """Revise initialized: changes to Trixi source code are tracked.
                   Project directory set to '"'"$PROJECT_DIR"'"'. Adding/removing packages will only affect this project.

                   Execute the following line to start a Trixi simulation:
                   
                   Trixi.run(\"parameters.toml\")
                   """
        else
          # If REPL is still not initialized, show warning
          @warn "Revise *NOT* initialized: Changes to Trixi source code are *NOT* tracked."
          @info """Project directory set to '"'"$PROJECT_DIR"'"'. Adding/removing packages will only affect this project.

                   Execute the following line to start a Trixi simulation:
                   
                   Trixi.run(\"parameters.toml\")
                   """
        end
      end
    catch
      # Do nothing... it probably means that Revise is not installed
      @info """Revise not found (exit interactive session and run `julia -e '"'"'import Pkg; Pkg.add("Revise")'"'"'` to install).
               Project directory set to '"'"$PROJECT_DIR"'"'. Adding/removing packages will only affect this project.

               Execute the following line to start a Trixi simulation:
                
               Trixi.run(\"parameters.toml\")
               """
    end
    
    # Load Trixi
    import Trixi
    '

  exec julia --banner=no --project="$PROJECT_DIR" --color=yes -i -e "$init"
fi
=#

# Load Trixi
import Trixi

# Run Trixi but handle user interrupts gracefully (Ctrl-c)
@Trixi.Auxiliary.interruptable Trixi.run(args=ARGS)
